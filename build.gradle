buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'com.netflix.nebula:gradle-ospackage-plugin:4.4.0'
    }
}

apply plugin: 'groovy'
apply plugin: 'nebula.ospackage'

import org.rundeck.gradle.PackageTask

def pSuffix = findProperty('packageSuffix')?: ""
def pGroup = findProperty('packageGroup')?: "org.rundeck"
def pOrg = findProperty('packageOrg')?: "rundeck"
def pType = findProperty('packageType')
def pBundle = findProperty('packageBundle')?: "rundeck"
def pRelease = findProperty('packageRelease')?: "1"
def pInclude = findProperty('packageInclude')?: '.*.war$'


def artifacts = fileTree('packaging/artifacts').matching {
    include {
        it.file.name ==~ pInclude
    }
}

def fileVersionInfo(file) {
    def m = file.name =~ /(?<flavor>rundeck(pro)?)-(?<bundle>[a-zA-Z]+)?-?(?<version>\d.+?)-((?<tag>[a-zA-Z][a-zA-Z0-9]+)-?)?(?<date>\d.+?)?\.war$/
    if(! m.matches()) {
        throw new GradleException("Unable to parse version [${version}]!".toString())
    }

    def info = [
        flavor: m.group('flavor'),
        num: m.group('version'),
        tag: m.group('tag'),
        date: m.group('date'),
        bundle: m.group('bundle'),
    ]

    info.package = info.bundle != null ? "$info.flavor-$info.bundle" : info.flavor

    def fullVersion = info.num
    fullVersion += info.date != null ? ".$info.date" : ""
    fullVersion += info.tag != null ? "~$info.tag" : ""

    def fullWarVersion = info.num
    fullWarVersion += info.date != null ? "-$info.date" : ""
    fullWarVersion += info.tag != null ? "-$info.tag" : ""

    info.warVersion = fullWarVersion
    info.version = fullVersion
    return info
}

def vInfo = fileVersionInfo(artifacts.getFiles()[0])
println vInfo

if (!pSuffix) {
    if (vInfo.tag == 'SNAPSHOT') {
        pSuffix = '-dev'
    } else if (vInfo.tag != null ) {
        pSuffix = '-test'
    }
}
def repo = "${pOrg}${pSuffix}"

def distro = 'any/any'
if (pType == 'rpm')
    distro = 'rpm_any/rpm_any'
else if (pType == 'war' || pType == 'jar')
    distro = 'java/maven2'


task publishWar{}
task publishAll{dependsOn publishWar}
task packageArtifacts{}
def firstFile = artifacts.getFiles().each { file ->
    def fileVersion = fileVersionInfo(file)

    def pTask = task "packageRundeck-$file.name"(type: PackageTask) {
        artifact = file
        packageVersion = fileVersion.version
        packageRelease = pRelease
        packageName = fileVersion.package
        packageDescription = 'Rundeck!!!!'
        libDir = "$projectDir/lib"
    }
    packageArtifacts.dependsOn pTask

    def pubWarTask = task "publishWar-$file.name"(type: Exec, group: 'publishing') {
        def command = [
            "package_cloud push",
            "pagerduty/${repo}/java/maven2",
            "artifacts/${file.name}",
            "--coordinates=${pGroup}:${vInfo.package}:${vInfo.warVersion}"
        ].join(' ')

        commandLine 'bash', '-c', command
    }
    publishWar.dependsOn pubWarTask

    def pubWarAscTask = task "publishWarAsc-$file.name"(type: Exec, group: 'publishing') {
        def command = [
            "package_cloud push",
            "pagerduty/${repo}/anyfile",
            "artifacts/${file.name}.asc",
        ].join(' ')

        commandLine 'bash', '-c', command
    }
    publishWar.dependsOn pubWarAscTask
}

task publish(type: Exec) {
    commandLine 'bash', '-c', "package_cloud push pagerduty/${repo}/${distro} ${project.buildDir}/distributions/*.${pType}"
}
publishAll.dependsOn publish
